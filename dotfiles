#!/usr/bin/env bash

# Main entry point for dotfiles management
# Supports both direct commands and interactive menu

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
export DOTFILES_DIR="$SCRIPT_DIR"

# Source utilities
source "$DOTFILES_DIR/lib/utils.sh"

# Show usage information
show_usage() {
    cat << EOF
${BOLD}Dotfiles Manager v2.0${NC}

${BOLD}USAGE:${NC}
    ./dotfiles [COMMAND] [OPTIONS]

${BOLD}COMMANDS:${NC}
    ${CYAN}menu${NC}        Show interactive menu (default)
    ${CYAN}bootstrap${NC}   Run full system setup (first time)
    ${CYAN}update${NC}      Update everything (git pull + brew upgrade + links)
    ${CYAN}link${NC}        Create/update symlinks only
    ${CYAN}brew${NC}        Install/update Homebrew packages
    ${CYAN}macos${NC}       Apply macOS settings
    ${CYAN}shell${NC}       Configure shell (Zsh/Oh-My-Zsh)
    ${CYAN}xcode${NC}       Setup Xcode themes and snippets

${BOLD}OPTIONS:${NC}
    --help, -h  Show this help message
    --no-brew   Skip Homebrew operations (for update command)

${BOLD}EXAMPLES:${NC}
    ./dotfiles              # Show interactive menu
    ./dotfiles bootstrap    # Full setup for new machine
    ./dotfiles update       # Update existing setup
    ./dotfiles link         # Just refresh symlinks
    ./dotfiles brew         # Just install/update packages

${BOLD}DIRECT SCRIPT ACCESS:${NC}
    You can also run scripts directly:
    ./scripts/brew.sh      # Run specific script

${BOLD}LOG FILE:${NC}
    $LOG_FILE

EOF
}

# Validate command
validate_command() {
    local cmd="$1"
    local valid_commands=("menu" "bootstrap" "update" "link" "brew" "macos" "shell" "xcode")
    
    for valid_cmd in "${valid_commands[@]}"; do
        if [[ "$cmd" == "$valid_cmd" ]]; then
            return 0
        fi
    done
    
    return 1
}

# Run a specific script
run_script() {
    local script_name="$1"
    shift  # Remove script name from arguments
    
    local script_path="$DOTFILES_DIR/scripts/${script_name}.sh"
    
    if [[ ! -f "$script_path" ]]; then
        log_error "Script not found: $script_path"
        echo -e "\nRun ${CYAN}./dotfiles --help${NC} to see available commands"
        exit 1
    fi
    
    # Make sure script is executable
    chmod +x "$script_path"
    
    # Run the script with any remaining arguments
    exec "$script_path" "$@"
}

# Main logic
main() {
    # Check macOS
    if ! check_macos; then
        exit 1
    fi
    
    # Parse command line arguments
    local command="${1:-menu}"
    local force_menu=0
    
    # Handle help flag at any position
    for arg in "$@"; do
        if [[ "$arg" == "--help" ]] || [[ "$arg" == "-h" ]]; then
            show_usage
            exit 0
        fi
        if [[ "$arg" == "--force-menu" ]]; then
            force_menu=1
        fi
    done
    
    # Handle commands
    case "$command" in
        menu|--menu|-m|"")
            # Show interactive menu
            if [[ -t 0 ]] && [[ -t 1 ]]; then
                # Use the zsh-compatible menu (uses bash select)
                exec bash "$DOTFILES_DIR/lib/zsh-menu.sh"
            else
                log_error "No interactive terminal detected"
                echo "This command requires an interactive terminal session."
                echo ""
                echo "If you're running this through a script or non-interactive shell,"
                echo "use specific commands instead:"
                echo "  ./dotfiles bootstrap    # First-time setup"
                echo "  ./dotfiles update       # Update everything"
                echo "  ./dotfiles link         # Update symlinks"
                echo ""
                echo "Run './dotfiles --help' for all available commands"
                exit 1
            fi
            ;;
        bootstrap|update|link|brew|macos|shell|xcode)
            # Run specific script
            shift  # Remove command from arguments
            run_script "$command" "$@"
            ;;
        *)
            log_error "Unknown command: $command"
            echo ""
            show_usage
            exit 1
            ;;
    esac
}

# Run main function
main "$@"